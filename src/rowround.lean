import category_theory.core

namespace rowround

universe u

/-!
# Rowround


We follow the flow of the rowround graph to define objects and relations.

- [Rowround Diagram](https://oxarbitrage.github.io/salsa20-docs/diagrams/rowround.html)
-/

/-- Represents a product of all rowround input objects. -/
variable y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ : Type u

variable A : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ

/-!
Rowround can be done in paralell. 

First we define objects and morphisms that will split the input of 16 objects 
into 4 sub products of 4 objects each.

The full input `y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ` is isomorphic with each of its 4 slices.
This is because the inverse can be done by just putting the slice back in the input without doing
anything else.
-/

/-- Represent the object formed by the first part of the input. -/
variable y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ : Type u

/-- Given the rowround input as a product of 16, get the first 4 objects from it. -/
def first (I : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ) := I.hom

lemma first_is_invertible (I : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ) : 
  I.hom ‚â´ I.inv = ùüô y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ :=
begin
  simp only [category_theory.iso.hom_inv_id],
end

/-- Represent the object formed by the second part of the input. -/
variable y‚ÇÑy‚ÇÖy‚ÇÜy‚Çá : Type u

/-- Given the rowround input as a product of 16, get the second 4 objects from it. -/
def second (I : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ y‚ÇÑy‚ÇÖy‚ÇÜy‚Çá) := I.hom

/-- Represent the object formed by the third part of the input. -/
variable y‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅ : Type u

/-- Given the rowround input as a product of 16, get the third 4 objects from it. -/
def third (I : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ y‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅ) := I.hom

/-- Represent the object formed by the fourth part of the input. -/
variable y‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ : Type u

/-- Given the rowround input as a product of 16, get the third 4 objects from it. -/
def fourth (I : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ y‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ) := I.hom

/-!
Before we send the objects to `quarterround` we need to put them in specific orders.

Again here we define the order morphisms from the isomorphisms between the input 4 objects product and
ordered output. 
-/

/-- Order the first product of objects in the needed position. 
This is here for completness as the first product is already in the right order.  -/
def order1 (I : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ ‚âÖ y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ) := I.hom

/-- The result of an `order2` operation. -/
variable y‚ÇÖy‚ÇÜy‚Çáy‚ÇÑ : Type u

/-- Order the second product of objects in the needed position. -/
def order2 (I : y‚ÇÑy‚ÇÖy‚ÇÜy‚Çá ‚âÖ y‚ÇÖy‚ÇÜy‚Çáy‚ÇÑ) := I.hom

/-- The result of an `order3` operation. -/
variable y‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚Çày‚Çâ : Type u

/-- Order the third product of objects in the needed position. -/
def order3 (I : y‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅ ‚âÖ y‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚Çày‚Çâ) := I.hom

/-- The result of an `order4` operation. -/
variable y‚ÇÅ‚ÇÖy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑ : Type u

/-- Order the fourth product objects in the needed position. -/
def order4 (I : y‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ y‚ÇÅ‚ÇÖy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑ) := I.hom

/-!
We now send ordered objects into `quarterround` operations and get the outputs.

Here we use the isomrphic property of the `quarterround` operation assumed in `quarterround.lean`.
-/

/-- The result of `quarterround1` operation. -/
variable z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ : Type u

/-- Apply `quarterround` to the first collection of object. -/
def quarterround1 (I : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ ‚âÖ z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ) : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ ‚ü∂ z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ := I.hom

/-- The result of `quarterround2` operation. -/
variable z‚ÇÖz‚ÇÜz‚Çáz‚ÇÑ : Type u

/-- Apply `quarterround` to the second collection of object. -/
def quarterround2 (I : y‚ÇÖy‚ÇÜy‚Çáy‚ÇÑ ‚âÖ z‚ÇÖz‚ÇÜz‚Çáz‚ÇÑ) : y‚ÇÖy‚ÇÜy‚Çáy‚ÇÑ ‚ü∂ z‚ÇÖz‚ÇÜz‚Çáz‚ÇÑ := I.hom

/-- The result of `quarterround3` operation. -/
variable z‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚Çàz‚Çâ : Type u

/-- Apply `quarterround` to the third collection of object. -/
def quarterround3 (I : y‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚Çày‚Çâ ‚âÖ z‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚Çàz‚Çâ) : y‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚Çày‚Çâ ‚ü∂ z‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚Çàz‚Çâ := I.hom

/-- The result of `quarterround4` operation. -/
variable z‚ÇÅ‚ÇÖz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑ : Type u

/-- Apply `quarterround` to the fourth collection of object. -/
def quarterround4 (I : y‚ÇÅ‚ÇÖy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑ ‚âÖ z‚ÇÅ‚ÇÖz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑ) : y‚ÇÅ‚ÇÖy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑ ‚ü∂ z‚ÇÅ‚ÇÖz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑ := I.hom

/-!
  Inverses of the order operations.

  After quarterround is applied we need to revert the positions modifictions we created in order functions.
-/

/-- The inverse of the `order1` operation given by the isomorphism. -/
def order1_inv (I : z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ ‚âÖ z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ) := I.hom

/-- Output of `order2‚Åª¬π` -/
variable z‚ÇÑz‚ÇÖz‚ÇÜz‚Çá : Type u

/-- The inverse of the `order2` operation given by the isomorphism. -/
def order2_inv (I : z‚ÇÖz‚ÇÜz‚Çáz‚ÇÑ ‚âÖ z‚ÇÑz‚ÇÖz‚ÇÜz‚Çá) := I.hom

/-- Output of `order3‚Åª¬π` -/
variable z‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅ : Type u

/-- The inverse of the `order3` operation given by the isomorphism. -/
def order3_inv (I : z‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚Çàz‚Çâ ‚âÖ z‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅ) := I.hom

/-- Output of `order4‚Åª¬π` -/
variable z‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ : Type u

/-- The inverse of the `order4` operation given by the isomorphism. -/
def order4_inv (I : z‚ÇÅ‚ÇÖz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑ ‚âÖ z‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ) := I.hom

/-!
Finally we join all the pieces together to form the 16 objects product that represent the output of
the rowround system.
-/

/-- The rowround complete output as a product. -/
variable z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉz‚ÇÑz‚ÇÖz‚ÇÜz‚Çáz‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ : Type u

/-- Join the four paralell pieces together to form the rowround output. -/
def join (I : z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ √ó z‚ÇÑz‚ÇÖz‚ÇÜz‚Çá √ó z‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅ √ó z‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ ‚âÖ z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉz‚ÇÑz‚ÇÖz‚ÇÜz‚Çáz‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ) :=
  I.hom

def rowround (I : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉz‚ÇÑz‚ÇÖz‚ÇÜz‚Çáz‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ) :=
  I.hom

def rowround_inv (I : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉz‚ÇÑz‚ÇÖz‚ÇÜz‚Çáz‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ) :=
  I.inv


end rowround
