import category_theory.core

namespace rowround

universe u

/-!
# Rowround

We follow the flow of the rowround graph to define objects and relations.

- [Rowround Diagram](https://oxarbitrage.github.io/salsa20-docs/diagrams/rowround.html)
-/

-- Object types.

/-- Represents a product of all rowround input objects. -/
variable y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ : Type u

/-- Represent the object formed by the first part of the input. -/
variables y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ y‚ÇÑy‚ÇÖy‚ÇÜy‚Çá y‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅ y‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ : Type u

/-- The result of an `order2`, `order3` and `order4` operation.
The result of `order1` is not here as it is the same as its input `y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ`.
-/
variables y‚ÇÖy‚ÇÜy‚Çáy‚ÇÑ y‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚Çày‚Çâ y‚ÇÅ‚ÇÖy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑ : Type u

/-- The result of `quarterround1`, `quarterround2`, `quarterround3` and `quarterround4`  operations. -/
variables z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ z‚ÇÖz‚ÇÜz‚Çáz‚ÇÑ z‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚Çàz‚Çâ z‚ÇÅ‚ÇÖz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑ : Type u

/-- Output of `order2‚Åª¬π`, `order3‚Åª¬π` and `order4‚Åª¬π`.
The result of `order1‚Åª¬π` is not here as it is the same as its input `z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ`.
-/
variables z‚ÇÑz‚ÇÖz‚ÇÜz‚Çá z‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅ z‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ : Type u

/-- The type of the rowround output as a product. -/
variable z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉz‚ÇÑz‚ÇÖz‚ÇÜz‚Çáz‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ : Type u

-- Isomorphisms.

/-- Isomorphisms between the input and its pieces. -/
variables (I‚ÇÅ : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ)
  (I‚ÇÇ : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ y‚ÇÑy‚ÇÖy‚ÇÜy‚Çá)
  (I‚ÇÉ : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ y‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅ)
  (I‚ÇÑ : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ y‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ)

/-- Isomorphisms between input ordered and unordered pieces. -/
variables (I'‚ÇÅ : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ ‚âÖ y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ) (I'‚ÇÇ : y‚ÇÑy‚ÇÖy‚ÇÜy‚Çá ‚âÖ y‚ÇÖy‚ÇÜy‚Çáy‚ÇÑ) (I'‚ÇÉ : y‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅ ‚âÖ y‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚Çày‚Çâ) 
  (I'‚ÇÑ : y‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ y‚ÇÅ‚ÇÖy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑ)

/-- Isomorphisms between the unordered input pieces and output unordered results. -/
variables (I''‚ÇÅ : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ ‚âÖ z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ) (I''‚ÇÇ : y‚ÇÖy‚ÇÜy‚Çáy‚ÇÑ ‚âÖ z‚ÇÖz‚ÇÜz‚Çáz‚ÇÑ) (I''‚ÇÉ : y‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚Çày‚Çâ ‚âÖ z‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚Çàz‚Çâ)
  (I''‚ÇÑ : y‚ÇÅ‚ÇÖy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑ ‚âÖ z‚ÇÅ‚ÇÖz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑ)

/-- Isomorphisms between the unordered outputs and ordered ones. -/
variables (I'''‚ÇÅ : z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ ‚âÖ z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ) (I'''‚ÇÇ : z‚ÇÖz‚ÇÜz‚Çáz‚ÇÑ ‚âÖ z‚ÇÑz‚ÇÖz‚ÇÜz‚Çá) (I'''‚ÇÉ : z‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚Çàz‚Çâ ‚âÖ z‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅ)
  (I'''‚ÇÑ : z‚ÇÅ‚ÇÖz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑ ‚âÖ z‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ)

/-- Isomorphism between a product of output ordered pieces and a full output. -/
variable Ij : z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ √ó z‚ÇÑz‚ÇÖz‚ÇÜz‚Çá √ó z‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅ √ó z‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ ‚âÖ z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉz‚ÇÑz‚ÇÖz‚ÇÜz‚Çáz‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ

/-- The isomorphisms between the input and the output of rowround. -/
variable Ir : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ ‚âÖ z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉz‚ÇÑz‚ÇÖz‚ÇÜz‚Çáz‚Çàz‚Çâz‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑz‚ÇÅ‚ÇÖ

/-- Create an object of the type input. -/
variable Y : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ

-- Relations.

/-- Given the rowround input as a product of 16, get the first 4 objects from it. -/
def first := I‚ÇÅ.hom

lemma first_is_invertible : I‚ÇÅ.hom ‚â´ I‚ÇÅ.inv = ùüô y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ :=
  by simp only [category_theory.iso.hom_inv_id]

/-- Given the rowround input as a product of 16, get the second 4 objects from it. -/
def second := I‚ÇÇ.hom

/-- Given the rowround input as a product of 16, get the third 4 objects from it. -/
def third := I‚ÇÉ.hom

/-- Given the rowround input as a product of 16, get the fourth 4 objects from it. -/
def fourth := I‚ÇÑ.hom

/-!
Before we send the objects to `quarterround` we need to put them in specific orders.

Again here we define the order morphisms from the isomorphisms between the input 4 objects product and
ordered output. 
-/

/-- Order the first product of objects in the needed position.
This is here for completness as the first product is already in the right order.  -/
def order1 := I'‚ÇÅ.hom

/-- Order the second product of objects in the needed position. -/
def order2 := I'‚ÇÇ.hom

/-- Order the third product of objects in the needed position. -/
def order3 := I'‚ÇÉ.hom

/-- Order the fourth product objects in the needed position. -/
def order4 := I'‚ÇÑ.hom

/-!
We now send ordered objects into `quarterround` operations and get the outputs.

Here we use the isomrphism property of the `quarterround` operation assumed in `quarterround.lean`.
-/

/-- Apply `quarterround` to the first collection of object. -/
def quarterround1 : y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉ ‚ü∂ z‚ÇÄz‚ÇÅz‚ÇÇz‚ÇÉ := I''‚ÇÅ.hom

/-- Apply `quarterround` to the second collection of object. -/
def quarterround2 : y‚ÇÖy‚ÇÜy‚Çáy‚ÇÑ ‚ü∂ z‚ÇÖz‚ÇÜz‚Çáz‚ÇÑ := I''‚ÇÇ.hom

/-- Apply `quarterround` to the third collection of object. -/
def quarterround3 : y‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚Çày‚Çâ ‚ü∂ z‚ÇÅ‚ÇÄz‚ÇÅ‚ÇÅz‚Çàz‚Çâ := I''‚ÇÉ.hom

/-- Apply `quarterround` to the fourth collection of object. -/
def quarterround4 : y‚ÇÅ‚ÇÖy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑ ‚ü∂ z‚ÇÅ‚ÇÖz‚ÇÅ‚ÇÇz‚ÇÅ‚ÇÉz‚ÇÅ‚ÇÑ := I''‚ÇÑ.hom

/-!
  Inverses of the order operations.

  After quarterround is applied we need to revert the positions modifictions we did in order functions.
-/

/-- The inverse of the `order1` operation. -/
def order1_inv := I'''‚ÇÅ.hom

/-- The inverse of the `order2` operation. -/
def order2_inv := I'''‚ÇÇ.hom

/-- The inverse of the `order3` operation. -/
def order3_inv := I'''‚ÇÉ.hom

/-- The inverse of the `order4` operation. -/
def order4_inv := I'''‚ÇÑ.hom

/-!
Finally we join all the pieces together to form the 16 objects product that represent the output of
the rowround system.
-/

/-- Join the four paralell pieces together to form the rowround output. -/
def join := Ij.hom

def rowround := Ir.hom

def rowround_inv := Ir.inv

lemma rowround_is_invertible : Ir.hom ‚â´ Ir.inv = ùüô y‚ÇÄy‚ÇÅy‚ÇÇy‚ÇÉy‚ÇÑy‚ÇÖy‚ÇÜy‚Çáy‚Çày‚Çây‚ÇÅ‚ÇÄy‚ÇÅ‚ÇÅy‚ÇÅ‚ÇÇy‚ÇÅ‚ÇÉy‚ÇÅ‚ÇÑy‚ÇÅ‚ÇÖ :=
  by simp only [category_theory.iso.hom_inv_id]

end rowround
